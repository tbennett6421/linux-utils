function proxy() {

        if [[ -z $proxy && -n $FX ]]; then
          export proxy=$FX
        fi
        if [[ -z $no_proxy && -n $NP ]]; then
          export no_proxy=$NP
        fi
        # If proxy and no_proxy are defined; set proxies
        if [[ -n $proxy && -n $no_proxy ]]; then
            echo 'Setting Proxy config'

            git config --global http.proxy ${proxy}
            git config --global https.proxy ${proxy}

            export http_proxy=${proxy}
            export https_proxy=${proxy}
            export HTTP_PROXY=${proxy}
            export HTTPS_PROXY=${proxy}

            export no_proxy=${no_proxy}
            export NO_PROXY=${no_proxy}

            export all_proxy=${proxy}
            export ALL_PROXY=${proxy}
            
            export ftp_proxy=${proxy}
            export FTP_PROXY=${proxy}

            ## If we proxied, ensure we use a ssl chain for interception
            export AWS_CA_BUNDLE="/etc/ssl/certs/ca-certificates.crt"
            export CURL_CA_BUNDLE="/etc/ssl/certs/ca-certificates.crt"
            export REQUESTS_CA_BUNDLE="/etc/ssl/certs/ca-certificates.crt"
            export SSL_CERT_FILE="/etc/ssl/certs/ca-certificates.crt"
        fi

}

function unproxy() {

        echo 'Removing Proxy config'

        git config --global --unset http.proxy
        git config --global --unset https.proxy

        unset http_proxy
        unset https_proxy
        unset HTTP_PROXY
        unset HTTPS_PROXY
        unset no_proxy
        unset NO_PROXY
        unset all_proxy
        unset ALL_PROXY
        unset ftp_proxy
        unset FTP_PROXY

        unset AWS_CA_BUNDLE
        unset CURL_CA_BUNDLE
        unset REQUESTS_CA_BUNDLE
        unset SSL_CERT_FILE
}

function md() {
    mkdir -p "$@" && cd "$@"
}

# find shorthand
function f() {
    find . -name "$1" 2>&1 | grep -v 'Permission denied'
}

# Convert hex to decimal
function h2d() { printf '%d\n' 0x"$1"; }

# Convert decimal to hex
function d2h() { printf '%x\n' "$1"; }

# Print out a color table
function colours() {
  for i in {0..255}; do
    if ((i < 10)); then
      prefix="    "
    elif ((i < 100)); then
      prefix="   "
    else
      prefix="  "
    fi
    printf "\x1b[48;5;${i}m\x1b[38;5;$[255-i]m${prefix}${i} "
    if (((i+1)%16 == 0)); then
      printf "\n"
    fi
  done
  printf "\x1b[0m\n"
}

# Test to see whether your terminal supports truecolor
function truecolor() {
  awk 'BEGIN{
    s="          "; s=s s s s s s s s;
    for (colnum = 0; colnum<77; colnum++) {
      r = 255-(colnum*255/76);
      g = (colnum*510/76);
      b = (colnum*255/76);
      if (g>255) g = 510-g;
      printf "\033[48;2;%d;%d;%dm", r,g,b;
      printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
      printf "%s\033[0m", substr(s,colnum+1,1);
    }
    printf "\n";
  }'
}

function backup() {
    cp "$1"{,.bak};
}

function extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)   tar xjf $1     ;;
            *.tar.gz)    tar xzf $1     ;;
            *.bz2)       bunzip2 $1     ;;
            *.rar)       unrar e $1     ;;
            *.gz)        gunzip $1      ;;
            *.tar)       tar xf $1      ;;
            *.tbz2)      tar xjf $1     ;;
            *.tgz)       tar xzf $1     ;;
            *.zip)       unzip $1       ;;
            *.Z)         uncompress $1  ;;
            *.7z)        7z x $1        ;;
            *.rar)       unrar e $1     ;;
            *)     echo "'$1' cannot be extracted via extract()" ;;
        esac
    else
        echo "'$1' is not a valid file"
    fi
}

function sort_excluding_header(){
    awk 'NR<2{print $0;next}{print $0 | "sort" }';
}

# Docker functions
dock-run() { sudo docker run -i -t --privileged $@ ;}
dock-exec() { sudo docker exec -i -t $@ /bin/bash ;}
dock-log() { sudo docker logs --tail=all -f $@ ;}
dock-port() { sudo docker port $@ ;}
dock-vol() { sudo docker inspect --format '{{ .Volumes }}' $@ ;}
dock-ip() { sudo docker inspect --format '{{ .NetworkSettings.IPAddress }}' $@ ;}
dock-rmc() { sudo docker rm sudo docker ps -qa --filter 'status=exited' ;}
dock-rmi() { sudo docker rmi -f sudo docker images | grep '^<none>' | awk '{print $3}' ;}
dock-stop() { sudo docker stop $(docker ps -a -q); }
dock-rm() { sudo docker rm $(docker ps -a -q); }

print_iommu_usb_devices(){
    for usb_ctrl in /sys/bus/pci/devices/*/usb*; do pci_path=${usb_ctrl%/*}; iommu_group=$(readlink $pci_path/iommu_group); echo "Bus $(cat $usb_ctrl/busnum) --> ${pci_path##*/} (IOMMU group ${iommu_group##*/})"; lsusb -s ${usb_ctrl#*/usb}:; echo; done
}

print_iommu_groups(){
for g in `find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V`; do     echo -e "\nIOMMU Group ${g##*/}:";     for d in $g/devices/*; do         echo -e "\t$(lspci -nns ${d##*/})";     done; done;
}

function last {
    ls -lt $1 | head
}

# copy a file to the clipboard from the command line
function copyfile {
    cat $1 | xclip -selection clipboard
}

function pynew() {
    mkdir -p "$1" && cd "$1" &&  # passing `-p` means it doesn't fail if the dir exists
    pyenv virtualenv "$2" "$1"-"$2" &&  # create the new virtualenv
    pyenv local "$1"-"$2" &&  # set the new virtualenv to be the local Python version
    pipup &&  # a bash alias for pip install --upgrade pip
    pip install pylint &&  # for Python linting in Sublime Text
    [ -e "requirements.txt" ] &&  # check if requirements.txt exists...
    pip install -r requirements.txt  # ...and if it does, install it
}
